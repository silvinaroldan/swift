<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-16T00:31:52-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Swift</title><author><name>Silvina Roldan</name><email>ing.silvinaroldan@gmail.com</email></author><entry><title type="html">Shortcuts</title><link href="http://localhost:4000/posts/shortcuts/" rel="alternate" type="text/html" title="Shortcuts" /><published>2024-05-16T00:00:00-03:00</published><updated>2024-05-16T00:00:00-03:00</updated><id>http://localhost:4000/posts/shortcuts</id><content type="html" xml:base="http://localhost:4000/posts/shortcuts/"><![CDATA[<h3 id="shortcuts">ShortCuts</h3>

<p>Cmd+U: Run all tests.<br />
Ctrl+Alt+Cmd+U: Run whichever test my text caret is currently in.<br />
Ctrl+Alt+Cmd+G: Run whichever test I last ran. That might be one test method, a whole test class, or all tests classes depending on your last action.</p>]]></content><author><name>Silvina Roldan</name><email>ing.silvinaroldan@gmail.com</email></author><category term="Shortcuts" /><summary type="html"><![CDATA[ShortCuts]]></summary></entry><entry><title type="html">Pattern Matching</title><link href="http://localhost:4000/posts/pattern-matching/" rel="alternate" type="text/html" title="Pattern Matching" /><published>2024-05-03T00:00:00-03:00</published><updated>2024-05-03T00:00:00-03:00</updated><id>http://localhost:4000/posts/pattern-matching</id><content type="html" xml:base="http://localhost:4000/posts/pattern-matching/"><![CDATA[<h3 id="partial-matches">Partial matches</h3>

<p>When any value is fine.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let friends = (you: "Silvina", friend: "Vera")

switch friends {
case ("Leonardo", _):
    print("Hello Leonardo")
case ("Leonardo", "Mariana":
    print("Hello, Leonardo and Mariana!")
default:
    print("Don't know who you are")
}

</code></pre></div></div>
<p>When you want to know about some values use let.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let authentication = (name: "silvina", password: "1d3cu2t")

switch authentication {
case ("leonardo", _):
    print("Enter your password")
case ("leonardo", let password):
    print("Hello, Leonardo!")
default:
    print("Don't know who you are")
}
</code></pre></div></div>

<h3 id="matching-tuples">Matching tuples</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func fizzbuzz(number: Int) -&gt; String {
    switch (number % 3 == 0, number % 5 == 0) {
    case (true, false):
        return "Fizz"
    case (false, true):
        return "Buzz"
    case (true, true):
        return "Fizz Buzz"
    case (false, false):
        return String(number)
    }
}

print(fizzbuzz(number: 15))
</code></pre></div></div>

<h3 id="loops">Loops</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for case (let name, let id) in users {
    print("User \(name) has the id \(id)")
}
</code></pre></div></div>

<h3 id="matching-optionals">Matching Optionals</h3>
<p>When you want to match “has a value” and “has no value” use .some and .none.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let name: String? = "Silvina"
let id: String? = "123456"

switch (name, id) {
case let (.some(name), .some(id)):
    print("Hello, \(name)")
case let (.some(name), .none):
    print("Please enter an id.")
default:
    print("Who are you?")
}
</code></pre></div></div>
<p>for case let</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let whatever: [Any?] = ["Jhon", 45, nil, "Mel"]

for case let .some(data) in whatever {
    print(data)
}

</code></pre></div></div>
<h3 id="matching-ranges">Matching ranges</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let price = 120

switch age {
case 0 ..&lt; 200:
    print("Very cheap")
case 200 ..&lt; 700:
    print("it's ok")
default:
    print("expensive")
}
</code></pre></div></div>
<h3 id="matching-enums-and-associated-values">Matching enums and associated values</h3>
<p>Basic enum</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum CoffeType {
    case expresso
    case latte
    case capuccino
}

let coffe: CoffeType = .expresso

switch coffe {
case .capuccino:
    print("It's capuccino")
case .expresso:
    print("It's an expresso")
case .latte:
    print("It's a latte")
}
</code></pre></div></div>
<p>with associated values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum CoffeType {
    case expresso(temperature: Int)
    case latte
    case capuccino
}

let coffe: CoffeType = .expresso(temperature: 20)

switch coffe {
case let .expresso(temperature):
    print("It's  an expresso at \(temperature) celsius degree")
case .capuccino:
    print("It's capuccino")
case .latte:
    print("It's a latte")
}

</code></pre></div></div>
<p>When you want to create a requirements clause that clarifies what you’re looking for use uses the <strong>where</strong> keyword</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let coffe: CoffeType = .expresso(temperature: 0)

switch coffe {
case let .expresso(temperature) where temperature &lt; 10:
    print("It's  a cold expresso")
case .expresso(temperature: let temperature):
    print("It's  an expresso at \(temperature) celsius degree")
case .capuccino:
    print("It's capuccino")
case .latte:
    print("It's a latte")
}
</code></pre></div></div>]]></content><author><name>Silvina Roldan</name><email>ing.silvinaroldan@gmail.com</email></author><category term="Partial matches" /><category term="Matching tuples" /><category term="Loops" /><category term=".none" /><category term=".some" /><category term="Matching ranges" /><category term="Matching enums and associated values" /><summary type="html"><![CDATA[Partial matches]]></summary></entry><entry><title type="html">Test</title><link href="http://localhost:4000/posts/test/" rel="alternate" type="text/html" title="Test" /><published>2024-05-03T00:00:00-03:00</published><updated>2024-05-03T00:00:00-03:00</updated><id>http://localhost:4000/posts/test</id><content type="html" xml:base="http://localhost:4000/posts/test/"><![CDATA[<h3 id="test">Test</h3>

<h4 id="advices">Advices</h4>
<p>Tests should be sensitive to things that are important, but ignore things that are unimportant.<br />
Avoid Hardcoded values to cover hidden assumptions.<br />
The most important thing to do is make sure the code you’re testing relies solely on the input you’re providing.</p>

<h3 id="shortcuts">ShortCuts</h3>

<p>Cmd+U: Run all tests.<br />
Ctrl+Alt+Cmd+U: Run whichever test my text caret is currently in.<br />
Ctrl+Alt+Cmd+G: Run whichever test I last ran.</p>]]></content><author><name>Silvina Roldan</name><email>ing.silvinaroldan@gmail.com</email></author><category term="Test" /><summary type="html"><![CDATA[Test]]></summary></entry></feed>